name: Rust

on:
  push:
    branches:
      # two reserved branches for bors the bot
      - staging
      - trying
  pull_request:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      RUST_BACKTRACE: 1
    steps:
      - uses: actions/checkout@v2
      - run: cargo build --all-targets --workspace
      - run: cargo test --all-targets --workspace

  checks:
    name: 'Check builds for non Tier-1 targets'
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: 1
    steps:
      - uses: actions/checkout@v2
      - run: |
          rustup default nightly
          rustup target add \
            x86_64-unknown-redox \
            wasm32-unknown-unknown
      - run: |
          cargo check --all-targets --workspace --target x86_64-unknown-redox
          cargo check --all-targets --workspace --target wasm32-unknown-unknown

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: rustup component add rustfmt
      - run: cargo fmt -- --check

  minimum-rust-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          rustup toolchain install 1.48.0
          rustup default 1.48.0
          rustup target add \
            x86_64-pc-windows-gnu \
            x86_64-apple-darwin \
            x86_64-pc-windows-msvc
      - run: |
          for target in x86_64-pc-windows-gnu x86_64-apple-darwin x86_64-pc-windows-msvc; do
            echo "== checking $target =="
            cargo check --all-targets --all --target "$target"
          done
        shell: bash

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          rustup component add clippy
          rustup target add \
            x86_64-pc-windows-gnu \
            x86_64-apple-darwin \
            x86_64-pc-windows-msvc
      - run: |
          for target in x86_64-pc-windows-gnu x86_64-apple-darwin x86_64-pc-windows-msvc; do
            echo "== checking $target =="
            cargo check --all-targets --all --target "$target"
            git ls-files '*lib.rs' | xargs touch
            # FIXME: Remove `-- -A clippy::option_as_ref_deref` when MSRV is bumped past 1.40.0
            cargo clippy --all-targets --all --target "$target" \
              -- \
              -A clippy::option_as_ref_deref \
              -A clippy::redundant_field_names
          done
        shell: bash

  # These jobs doesn't actually test anything, but they're only used to tell
  # bors the build completed, as there is no practical way to detect when a
  # workflow is successful listening to webhooks only.
  #
  # ALL THE PREVIOUS JOBS NEED TO BE ADDED TO THE `needs` SECTION OF THIS JOB!
  end-success:
    name: bors build finished
    runs-on: ubuntu-latest
    needs: [build, checks, rustfmt, minimum-rust-version]
    if: github.actor == 'bors[bot]' && success()
    steps:
      - name: mark the job as a success
        run: exit 0
